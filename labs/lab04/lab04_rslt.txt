- info registers
r0             0xc6625b            13001307
r1             0xce0370            13501296
r2             0x0                 0
r3             0xd0000128          -805306072
r4             0x7a11a             499994
r5             0x0                 0
r6             0xce0376            13501302
r7             0x0                 0
r8             0xffffffff          -1
r9             0xffffffff          -1
r10            0xffffffff          -1
r11            0xffffffff          -1
r12            0x20041f60          537141088
sp             0x20041fa8          0x20041fa8
lr             0x10001453          268440659
pc             0x100011b0          0x100011b0 <sleep_until+192>
xPSR           0x61000000          1627389952
msp            0x20041fa8          0x20041fa8
psp            0xfffffffc          0xfffffffc
primask        0x0                 0
basepri        0x0                 0
faultmask      0x0                 0
control        0x0                 0

/////////////////////////////////////////////////////////////////////////////////
- disassemble main_asm, +26
Dump of assembler code from 0x10000360 to 0x1000037a:
   0x10000360 <main_asm+0>:	movs	r0, #25
   0x10000362 <main_asm+2>:	bl	0x1000030c <asm_gpio_init>
   0x10000366 <main_asm+6>:	movs	r0, #25
   0x10000368 <main_asm+8>:	movs	r1, #1
   0x1000036a <main_asm+10>:	bl	0x10000314 <asm_gpio_set_dir>
   0x1000036e <loop+0>:	ldr	r0, [pc, #36]	; (0x10000394 <led_set_state+8>)
   0x10000370 <loop+2>:	bl	0x10001244 <sleep_ms>
   0x10000374 <loop+6>:	bl	0x1000037a <sub_toggle>
   0x10000378 <loop+10>:	b.n	0x1000036e <loop>
End of assembler dump.

/////////////////////////////////////////////////////////////////////////////////
- What is the entry point address (in hex) of the blink_asm application?
0x10000352 <main>

- What is the entry point address (in hex) of the “main_asm” function?
0x10000354 <main+2>

Note: These are the address of these functions as stored in the program counter.

- Describe each of the differences between the assembly that was written for the main_asm function and the version that was executed according to GDB.

1. The assembly code written in the main_asm was at a higher level when compared to the GDB version. The code that written for the main_asm was using the functions defined in lab04.c whereas the code being executed by gdb was converted into the assembly code by accessing those header files (to find the actual locations of the in-built functions).
For example, gdb went into those header files and executed some addtional assembly codes such as crt0.S and pico_int64_ops_aeabi.S
